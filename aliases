#!/usr/bin/env bash

# Detect which `ls` flavor is in use
unamestr=`uname`
if [[ $unamestr == 'Darwin' ]];then
    colorflag="-G"
else
    colorflag="--color=auto"
fi

alias py="ptpython"
alias pyi="ptipython"
alias nv="nvim"

alias l="ls -lf ${colorflag}"

alias la="ls -laF ${colorflag}"

alias ll="ls -lh ${colorflag}"

alias ls="command ls ${colorflag}"

# It's extremely annoying that this is not the default
alias rg="command rg --hidden"

# Always enable colored `grep` output
# Note: `GREP_OPTIONS="--color=auto"` is deprecated, hence the alias usage.
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias gitlog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias vup="vagrant destroy -f && vagrant up && vagrant ssh"
alias vdown="vagrant destroy -f"

alias ssm="aws ssm start-session --target "

alias python="/usr/local/bin/python3"
alias pip="/usr/local/bin/pip3"


alias highcpu="ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head"


# List all CRD in the cluster b
kube-crds() {
    kubectl api-resources --verbs=list -o name | xargs -n 1 kubectl get -o name
}

# alias kpvc="kubectl get pods -o json | jq -c '.items[] | {name: .metadata.name, namespace: .metadata.namespace, claimName:.spec.volumes[] | select( has (\"persistentVolumeClaim\") ).persistentVolumeClaim.claimName }'"
alias kpvc="kubectl get pods -o json | jq -c '.items[] | {name: .metadata.name, namespace: .metadata.namespace, claimName: .spec |  select( has (\"volumes\") ).volumes[] | select( has (\"persistentVolumeClaim\") ).persistentVolumeClaim.claimName }'"
# Handled by zplug "plugins/git", from:oh-my-zsh
# alias gst="git status"
# alias gd="git diff"
# alias gco="git checkout"
# alias gfa="git fetch --all"
# alias ga="git add"
# alias gc="git commit -v"
# alias gp="git push"

vagrant-kill-all() {
    for i in $(vagrant global-status | grep virtualbox | awk '{ print $1 }'); do
        vagrant destroy -f "$i"
    done
}


add-upstream-remote() {
    git remote add upstream "git@github.com:$1"
}

working() {
    # Drop myself into a running tmux session called working
    # TODO: Add a local setup script in order to initialize local vars

    # Note to self: -d is a good flag since it allows for aggresive resizing
    if ! tmux a -d -t working >/dev/null 2>/dev/null; then
        tmux new -s working
    fi
}

